var _ = require('underscore'),
    _mixin = _.mixin;

_.mixin = function () {
    _mixin.apply(_, arguments);
    return _;
};
//---------------------------------------------------------------------------
// Exports First
//---------------------------------------------------------------------------
module.exports = exports = _;
//---------------------------------------------------------------------------
// Local
//---------------------------------------------------------------------------
/**
 * @param {...Mixed}
 * @returns {Object}
 */
function hashify () {
    var args = _.rest(arguments, 0);
    return _.object(args, args);
}

function enumerate () {
    return _.reduce(arguments, function (acc, cur, idx) {
        acc[cur] = idx + 1;
        return acc;
    }, {});
}
/**
 * @param {String} name Name of the function to alias.
 * @param {Object} [scope] Optional scope to use. If not given, uses the current 'this'.
 * @param {Mixed[]} [args] Optional list of arguments to prepend when calling
 *      the aliased function.
 * @returns {Function}
 */
function alias (name, scope, args) {
    if (arguments.length < 3 && _.isArray(scope)) {
        args = scope;
        scope = null;
    }
    
    args = args || [];
    
    return function () {
        var obj = scope || this,
            fn = obj[name];
        
        return fn.apply(obj, args.concat(_.rest(arguments, 0)));
    };
}
/**
 * Create a getter on the object that when first accessed executes the given
 * function and replaces the named getter with the value returned from the
 * function.
 * @param {Object} obj The object
 * @param {String} name The property name
 * @param {Function} fn The function to execute
 * @param {Boolean} [hidden=false] Should the propery be enumerable
 * @returns {Object} The object passed in
 */
function lazily (obj, name, fn, hidden) {
    hidden = !!hidden;
    return Object.defineProperty(obj, name, {
        get: function () {
            var val = fn();
            Object.defineProperty(obj, name, {
                value: val,
                enumerable: !hidden,
                writable: !hidden,
                configurable: !hidden
            });
            return val;
        },
        enumerable: !hidden,
        configurable: true
    });
}

function lazilyRequire (obj, name, module) {
    return lazily(obj, name, require.bind(null, module));
}
/**
 * Create a new object and then apply the constructor function with the arguments.
 * @param {Function} fn
 * @param {Mixed[]} [args]
 * @returns {Object} The new instance
 */
function instantiate (fn, args) {
    var obj = Object.create(fn.prototype);
    fn.apply(obj, args || []);
    return obj;
}
//---------------------------------------------------------------------------
// Update Exports
//---------------------------------------------------------------------------
exports.extend(exports, {
    hashify:        hashify,
    enumerate:      enumerate,
    alias:          alias,
    instantiate:    instantiate,
    make:           instantiate,
    lazily:         lazily
});

lazilyRequire(exports, 'rx', 'rx');
lazilyRequire(exports, 'LinkedList', './linked-list');
lazilyRequire(exports, 'classify', './classify');
