//---------------------------------------------------------------------------
// Cursor
//---------------------------------------------------------------------------
function Cursor (list) {
    this.list = list;
    this.rewind();
}

Cursor.prototype = {
    destroy: function () {
        this.list = null;
        this.item = null;
    },
    
    rewind: function () {
        this.item = this.list.head;
        this.index = 0;
        return this;
    },
    
    ffwd: function () {
        var list = this.list;
        this.item = list.tail;
        this.index = list.length - 1;
        return this;
    },
    
    moveTo: function (idx) {
        var delta = idx - this.index;
        // TODO: Optimize to move from head or tail depending on how far idx is
        // from either of those.
        if (idx === 0) {
            this.rewind();
        }
        else if (idx === -1) {
            this.ffwd();
        }
        else {
            this[delta > 0 ? 'rewind' : 'ffwd']();
            this.moveBy(delta);
        }
        
        return this;
    },
    
    moveBy: function (amt) {
        var method = amt > 0 ? 'next' : 'prev',
            delta = this.index + amt,
            i = Math.abs(amt);
        
        if (amt !== 0) {
            while (i-- && this.item) {
                this[method]();
            }
        }
        
        return this;
    },
    
    next: function () {
        var c = this.item || this.list.head;

        if (c) {
            this.item = c.next;
            this.index++;
        }
        
        return this;
    },
    
    prev: function () {
        var p = this.item || this.list.head;
        
        if (p) {
            this.item = p.prev;
            this.index--;
        }
        
        return this;
    },
    
    insert: function (data) {
        var item;
        if (item) {
            item.insert(new Item(data));
            this.list.length++;
        }
        return this;
    },
    
    insertBefore: function (data) {
        var item;
        if (item) {
            item.insertBefore(new Item(data));
            this.list.length++;
        }
        return this;
    },
    
    remove: function () {
        var item = this.item;
        if (item) {
            item.destroy();
            this.list.length--;
        }
        return this;
    },
    
    get value () {
        var item = this.item;
        return item && item.data;
    },
    
    set value (v) {
        this.item.data = v;
    }
};

module.exports = Cursor;